import os
import pandas as pd
import argparse

# Fun√ß√£o para listar arquivos CSV no diret√≥rio especificado
def listar_csvs(diretorio, incluir_subpastas=False):
    arquivos_csv = []

    # Se incluir_subpastas for True, percorre todas as subpastas
    if incluir_subpastas:
        for raiz, _, arquivos in os.walk(diretorio):
            arquivos_csv.extend([os.path.join(raiz, f) for f in arquivos if f.endswith(".csv")])
    else:
        # Caso contr√°rio, lista apenas os arquivos do diret√≥rio principal
        arquivos_csv = [os.path.join(diretorio, f) for f in os.listdir(diretorio) if f.endswith(".csv")]

    return arquivos_csv

# Fun√ß√£o principal para ler, concatenar e salvar os arquivos CSV
def merge_csvs(arquivos, separador=";", nome_saida="agrupado.csv"):
    df_final = pd.DataFrame()  # DataFrame vazio para acumular os dados
    total_linhas = 0  # Contador de linhas totais

    for arquivo in arquivos:
        try:
            # L√™ o arquivo CSV
            df_temp = pd.read_csv(arquivo)

            # Exibe informa√ß√µes sobre o arquivo lido
            print(f"Lendo '{arquivo}': {df_temp.shape[0]} linhas, {df_temp.shape[1]} colunas")

            # Adiciona uma coluna com o nome do arquivo de origem
            df_temp["origem"] = os.path.basename(arquivo)

            # Concatena ao DataFrame final
            df_final = pd.concat([df_final, df_temp], ignore_index=True)

            # Atualiza o contador de linhas
            total_linhas += df_temp.shape[0]

        except Exception as e:
            # Em caso de erro na leitura, exibe mensagem e continua
            print(f"‚ö†Ô∏è Erro ao ler '{arquivo}': {e}")

    # Verifica se o DataFrame final cont√©m dados
    if not df_final.empty:
        # Salva o resultado em um novo arquivo CSV
        df_final.to_csv(nome_saida, sep=separador, index=False)

        # Mensagens de sucesso e resumo
        print(f"\n‚úÖ Arquivo '{nome_saida}' gerado com sucesso.")
        print(f"üìä Total de arquivos processados: {len(arquivos)}")
        print(f"üìà Total de linhas combinadas: {total_linhas}")
    else:
        # Caso nenhum dado tenha sido lido com sucesso
        print("üö´ Nenhum dado v√°lido foi encontrado para gerar o arquivo.")

# Fun√ß√£o principal que configura a interface de linha de comando
def main():
    # Cria o parser de argumentos
    parser = argparse.ArgumentParser(description="Merge m√∫ltiplos arquivos CSV em um √∫nico arquivo.")

    # Argumento para o diret√≥rio onde est√£o os arquivos CSV
    parser.add_argument("-d", "--diretorio", default=".", help="Diret√≥rio onde est√£o os arquivos CSV")

    # Argumento para incluir arquivos em subpastas
    parser.add_argument("-s", "--subpastas", action="store_true", help="Incluir arquivos em subpastas")

    # Argumento para nome do arquivo de sa√≠da
    parser.add_argument("-o", "--output", default="agrupado.csv", help="Nome do arquivo de sa√≠da")

    # Argumento para definir o separador do CSV
    parser.add_argument("-sep", "--separador", default=";", help="Separador do CSV de sa√≠da")

    # L√™ os argumentos fornecidos pelo usu√°rio
    args = parser.parse_args()

    # Lista os arquivos CSV com base nos argumentos
    arquivos_csv = listar_csvs(args.diretorio, args.subpastas)

    # Verifica se h√° arquivos para processar
    if arquivos_csv:
        print(f"\nüîç {len(arquivos_csv)} arquivos .csv encontrados.")
        merge_csvs(arquivos_csv, separador=args.separador, nome_saida=args.output)
    else:
        # Mensagem caso nenhum arquivo seja encontrado
        print("üö´ Nenhum arquivo .csv encontrado no diret√≥rio especificado.")

# Ponto de entrada do script
if __name__ == "__main__":
    main()